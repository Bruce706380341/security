// Uses Gradle to build RPMs since that's what we use for the other plugins. When all you have is a hammer...
plugins {
   id "nebula.ospackage" version "5.3.0"
}

//apply plugin: 'elasticsearch.testclusters'
//apply plugin: 'elasticsearch.rest-test'

// To prevent conflicts with maven build under build/
buildDir = 'gradle-build'

ext {
    opendistroVersion = '1.12.0'
    isSnapshot = "true" == System.getProperty("build.snapshot", "true")
}

group = "com.amazon.opendistroforelasticsearch"
// Increment the final digit when there's a new plugin versions for the same opendistro version
// Reset the final digit to 0 when upgrading to a new opendistro version
version = "${opendistroVersion}.0" + (isSnapshot ? "-SNAPSHOT" : "")


if (!project.hasProperty("archivePath")) {
    throw new GradleException("Missing -ParchivePath command line switch pointing to built plugin ZIP")
}
if (!project.file(archivePath).exists()) {
    throw new GradleException("Missing plugin zip file: $archivePath")
}

ospackage {
    packageName = "opendistro-security"
    release = isSnapshot ? "0.0" : '0'
    version = "${project.version}"

    into '/usr/share/elasticsearch/plugins'
    from(zipTree(project.file(archivePath).absolutePath)) {
        into "opendistro_security"
        permissionGroup 'elasticsearch'
    }

    user 'root'
    permissionGroup 'root'

    requires('elasticsearch-oss', "7.10.0", EQUAL)
    packager = 'Amazon'
    vendor = 'Amazon'
    os = 'LINUX'
    prefix '/usr'

    license 'ASL-2.0'
    maintainer 'OpenDistro for Elasticsearch Team <opendistro@amazon.com>'
    url 'https://opendistro.github.io/for-elasticsearch/downloads.html'
    summary '''
     Security plugin for OpenDistro for Elasticsearch. 
     Reference documentation can be found at https://opendistro.github.io/for-elasticsearch-docs/.
     '''.stripIndent().replace('\n', ' ').trim()

    //TODO: Would be better if the install_demo_configuration.sh script is marked executable in the upstream plugin instead of running bash manually here
    postInstall "exec /bin/bash /usr/share/elasticsearch/plugins/opendistro_security/tools/install_demo_configuration.sh -y -i -s"
}

buildRpm {
    arch = 'NOARCH'
    addParentDirs = false
    archiveName "${packageName}-${version}.rpm"
}

buildDeb {
    arch = 'amd64'
    archiveName "${packageName}-${version}.deb"
}

integTest {
    systemProperty 'tests.security.manager', 'false'
    systemProperty 'java.io.tmpdir', es_tmp_dir.absolutePath
    systemProperty 'buildDir', buildDir.path
    systemProperty "https", System.getProperty("https", securityEnabled.toString())
    systemProperty "user", System.getProperty("user", "admin")
    systemProperty "password", System.getProperty("password", "admin")
    // Tell the test JVM if the cluster JVM is running under a debugger so that tests can use longer timeouts for
    // requests. The 'doFirst' delays reading the debug setting on the cluster till execution time.
    doFirst {
        systemProperty 'cluster.debug', getDebug()
        // Set number of nodes system property to be used in tests
        systemProperty 'cluster.number_of_nodes', "${_numNodes}"
        // There seems to be an issue when running multi node run or integ tasks with unicast_hosts
        // not being written, the waitForAllConditions ensures it's written
        getClusters().forEach { cluster ->
            cluster.waitForAllConditions()
        }
    }

    // The -Dcluster.debug option makes the cluster debuggable; this makes the tests debuggable
    if (System.getProperty("test.debug") != null) {
        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=n,suspend=y,address=8000'
    }
}

dependencies {
    compileOnly "org.elasticsearch:elasticsearch:${es_version}"

    testCompile "org.elasticsearch.test:framework:${es_version}"
}
